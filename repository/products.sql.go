// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package repository

import (
	"context"
	"database/sql"
)

const countProducts = `-- name: CountProducts :one
SELECT COUNT(*) AS TOTAL
FROM products
`

func (q *Queries) CountProducts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countProducts)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const findProductByID = `-- name: FindProductByID :one
SELECT id, name, description, price FROM products
WHERE id = $1
`

func (q *Queries) FindProductByID(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, findProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
	)
	return i, err
}

const findProductByName = `-- name: FindProductByName :one
SELECT id, name, description, price FROM products
WHERE name = $1
LIMIT 1
`

func (q *Queries) FindProductByName(ctx context.Context, name string) (Product, error) {
	row := q.db.QueryRowContext(ctx, findProductByName, name)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
	)
	return i, err
}

const getAllProductsPagination = `-- name: GetAllProductsPagination :many
SELECT id, name, description, price FROM products LIMIT $1 OFFSET $2
`

type GetAllProductsPaginationParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllProductsPagination(ctx context.Context, arg GetAllProductsPaginationParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProductsPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTop10MostSoldProducts = `-- name: GetTop10MostSoldProducts :many
SELECT 
    p.id, p.name, p.description, p.price
FROM 
    order_items AS oi
JOIN 
    products AS p ON oi.product_id = p.id
GROUP BY 
    p.id
ORDER BY 
    SUM(oi.quantity) DESC
LIMIT 10
`

func (q *Queries) GetTop10MostSoldProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getTop10MostSoldProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertProduct = `-- name: InsertProduct :one
INSERT INTO products (name, description, price ) 
VALUES ($1, $2, $3)
RETURNING id, name, description, price
`

type InsertProductParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Price       string         `json:"price"`
}

func (q *Queries) InsertProduct(ctx context.Context, arg InsertProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, insertProduct, arg.Name, arg.Description, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
	)
	return i, err
}
