// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: stock.sql

package repository

import (
	"context"
)

const decreaseStock = `-- name: DecreaseStock :execrows
UPDATE stock
SET available_quantity = available_quantity - $2
WHERE product_id = $1
AND available_quantity >= $2
`

type DecreaseStockParams struct {
	ProductID         int32 `json:"product_id"`
	AvailableQuantity int32 `json:"available_quantity"`
}

func (q *Queries) DecreaseStock(ctx context.Context, arg DecreaseStockParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, decreaseStock, arg.ProductID, arg.AvailableQuantity)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getStockByProductID = `-- name: GetStockByProductID :one
SELECT id, product_id, available_quantity FROM stock
WHERE product_id = $1
`

func (q *Queries) GetStockByProductID(ctx context.Context, productID int32) (Stock, error) {
	row := q.db.QueryRowContext(ctx, getStockByProductID, productID)
	var i Stock
	err := row.Scan(&i.ID, &i.ProductID, &i.AvailableQuantity)
	return i, err
}

const insertStockProduct = `-- name: InsertStockProduct :one
INSERT INTO stock (product_id, available_quantity)
VALUES ($1,$2)
RETURNING id, product_id, available_quantity
`

type InsertStockProductParams struct {
	ProductID         int32 `json:"product_id"`
	AvailableQuantity int32 `json:"available_quantity"`
}

func (q *Queries) InsertStockProduct(ctx context.Context, arg InsertStockProductParams) (Stock, error) {
	row := q.db.QueryRowContext(ctx, insertStockProduct, arg.ProductID, arg.AvailableQuantity)
	var i Stock
	err := row.Scan(&i.ID, &i.ProductID, &i.AvailableQuantity)
	return i, err
}
