// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package repository

import (
	"context"
)

const addOrderItem = `-- name: AddOrderItem :one
INSERT INTO order_items (order_id, product_id, quantity)
VALUES ($1, $2, $3)
RETURNING id, order_id, product_id, quantity
`

type AddOrderItemParams struct {
	OrderID   int32 `json:"order_id"`
	ProductID int32 `json:"product_id"`
	Quantity  int32 `json:"quantity"`
}

func (q *Queries) AddOrderItem(ctx context.Context, arg AddOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, addOrderItem, arg.OrderID, arg.ProductID, arg.Quantity)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const cancelOrder = `-- name: CancelOrder :execrows
UPDATE orders
SET status = 'canceled'
WHERE id = $1
`

func (q *Queries) CancelOrder(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.ExecContext(ctx, cancelOrder, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const completeOrder = `-- name: CompleteOrder :execrows
UPDATE orders
SET status = 'completed'
WHERE id = $1
`

func (q *Queries) CompleteOrder(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.ExecContext(ctx, completeOrder, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (customer_id, order_date, status)
VALUES ($1, NOW(), 'pending')
RETURNING id, customer_id, order_date, status
`

func (q *Queries) CreateOrder(ctx context.Context, customerID int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, customerID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.OrderDate,
		&i.Status,
	)
	return i, err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, customer_id, order_date, status FROM orders
WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.OrderDate,
		&i.Status,
	)
	return i, err
}

const getOrderItemsByOrderID = `-- name: GetOrderItemsByOrderID :many
SELECT id, order_id, product_id, quantity FROM order_items
WHERE order_id = $1
`

func (q *Queries) GetOrderItemsByOrderID(ctx context.Context, orderID int32) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
